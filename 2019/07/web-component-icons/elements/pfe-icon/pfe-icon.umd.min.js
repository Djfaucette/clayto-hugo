!(function(e, t) {
  "object" == typeof exports && "undefined" != typeof module
    ? (module.exports = t(require("../pfelement/pfelement.umd.min")))
    : "function" == typeof define && define.amd
    ? define(["../pfelement/pfelement.umd.min"], t)
    : (e.PfeIcon = t(e.PFElement));
})(this, function(t) {
  "use strict";
  t = t && t.hasOwnProperty("default") ? t.default : t;
  var n = function(e, t) {
      if (!(e instanceof t))
        throw new TypeError("Cannot call a class as a function");
    },
    o = (function() {
      function r(e, t) {
        for (var o = 0; o < t.length; o++) {
          var r = t[o];
          (r.enumerable = r.enumerable || !1),
            (r.configurable = !0),
            "value" in r && (r.writable = !0),
            Object.defineProperty(e, r.key, r);
        }
      }
      return function(e, t, o) {
        return t && r(e.prototype, t), o && r(e, o), e;
      };
    })(),
    c = function(e, t) {
      if (Array.isArray(e)) return e;
      if (Symbol.iterator in Object(e))
        return (function(e, t) {
          var o = [],
            r = !0,
            n = !1,
            a = void 0;
          try {
            for (
              var c, i = e[Symbol.iterator]();
              !(r = (c = i.next()).done) &&
              (o.push(c.value), !t || o.length !== t);
              r = !0
            );
          } catch (e) {
            (n = !0), (a = e);
          } finally {
            try {
              !r && i.return && i.return();
            } finally {
              if (n) throw a;
            }
          }
          return o;
        })(e, t);
      throw new TypeError(
        "Invalid attempt to destructure non-iterable instance"
      );
    },
    r = (function() {
      function r(e, t, o) {
        n(this, r), (this.name = e), (this.path = t), (this._parseIconName = o);
      }
      return (
        o(r, [
          {
            key: "parseIconName",
            value: function(e) {
              return this._parseIconName(e, this.name, this.path);
            }
          }
        ]),
        r
      );
    })();
  function a(e, t, o) {
    var r = /^([^-]+)-(.*)/.exec(e),
      n = c(r, 3)[2],
      a = t + "-icon-" + n;
    return {
      iconSetName: t,
      iconName: n,
      iconId: a,
      iconPath: o + "/" + a + ".svg"
    };
  }
  var i,
    e = (function(e) {
      function a() {
        n(this, a);
        var e = (function(e, t) {
          if (!e)
            throw new ReferenceError(
              "this hasn't been initialised - super() hasn't been called"
            );
          return !t || ("object" != typeof t && "function" != typeof t) ? e : t;
        })(this, (a.__proto__ || Object.getPrototypeOf(a)).call(this, a));
        return (
          (e.image = e.shadowRoot.querySelector("svg image")),
          e.image.addEventListener("load", function() {
            return e.iconLoad();
          }),
          e.image.addEventListener("error", function() {
            return e.iconLoadError();
          }),
          e
        );
      }
      return (
        (function(e, t) {
          if ("function" != typeof t && null !== t)
            throw new TypeError(
              "Super expression must either be null or a function, not " +
                typeof t
            );
          (e.prototype = Object.create(t && t.prototype, {
            constructor: {
              value: e,
              enumerable: !1,
              writable: !0,
              configurable: !0
            }
          })),
            t &&
              (Object.setPrototypeOf
                ? Object.setPrototypeOf(e, t)
                : (e.__proto__ = t));
        })(a, t),
        o(
          a,
          [
            {
              key: "html",
              get: function() {
                return '<style>:host{--pfe-icon--spacing:var(--pfe-theme--container-spacer, 1rem);--pfe-icon--size:var(--pfe-theme--icon-size, 1em);--pfe-icon--color--bg:transparent;--pfe-icon--color--border:transparent;display:inline-block;vertical-align:middle;border-radius:50%;background-color:var(--pfe-icon--color--bg);border:var(--pfe-icon--color--border);position:relative}:host,:host svg{width:1em;height:1em}@media screen and (-ms-high-contrast:active),screen and (-ms-high-contrast:none){:host{background-color:#fff!important}:host svg filter feFlood{flood-color:#000!important}}@supports (-ms-accelerator:true){:host{background-color:#fff!important}:host svg filter feFlood{flood-color:#000!important}}@supports (-ms-ime-align:auto){:host{background-color:#fff!important}:host svg filter feFlood{flood-color:#000!important}}:host([data-block]){display:block;margin-bottom:var(--pfe-icon--spacing);margin-top:var(--pfe-icon--spacing)}:host([data-block]):first-child{margin-top:0}@media screen and (-ms-high-contrast:active),screen and (-ms-high-contrast:none){:host svg image{-webkit-filter:none;filter:none}}:host svg image.load-failed{display:none}:host svg filter feFlood{flood-color:var(--pfe-broadcasted--color--text)}:host([size="2x"]),:host([size="2x"]) svg{width:2em;height:2em}:host([size="3x"]),:host([size="3x"]) svg{width:3em;height:3em}:host([size="4x"]),:host([size="4x"]) svg{width:4em;height:4em}:host([size=xl]),:host([size=xl]) svg{width:100px;height:100px}:host([size=lg]),:host([size=lg]) svg{width:64px;height:64px}:host([size=md]),:host([size=md]) svg{width:32px;height:32px}:host([size=sm]),:host([size=sm]) svg{width:14px;height:14px}:host([color=base]){--pfe-broadcasted--color--text:var(--pfe-theme--color--ui-base, #0477a4)}:host([color=complement]){--pfe-broadcasted--color--text:var(--pfe-theme--color--ui-complement, #464646)}:host([color=accent]){--pfe-broadcasted--color--text:var(--pfe-theme--color--ui-accent, #fe460d)}:host([color=critical]){--pfe-broadcasted--color--text:var(--pfe-theme--color--feedback--critical, #bb0000)}:host([color=important]){--pfe-broadcasted--color--text:var(--pfe-theme--color--feedback--important, #d73401)}:host([color=moderate]){--pfe-broadcasted--color--text:var(--pfe-theme--color--feedback--moderate, #ffc024)}:host([color=success]){--pfe-broadcasted--color--text:var(--pfe-theme--color--feedback--success, #2e7d32)}:host([color=info]){--pfe-broadcasted--color--text:var(--pfe-theme--color--feedback--info, #0277bd)}:host([color=default]){--pfe-broadcasted--color--text:var(--pfe-theme--color--feedback--default, #606060)}:host([circled]){--pfe-icon--color--bg:transparent;--pfe-icon--color--border:var(--pfe-theme--color--surface--border, #d2d2d2);padding:.05em}:host([circled=base]){--pfe-icon--color--bg:var(--pfe-theme--color--surface--base, #dfdfdf);--pfe-icon--color--border:transparent;--pfe-broadcasted--color--text:var(--pfe-theme--color--surface--base--text, #333)}:host([circled=lightest]){--pfe-icon--color--bg:var(--pfe-theme--color--surface--lightest, #fff);--pfe-icon--color--border:transparent;--pfe-broadcasted--color--text:var(--pfe-theme--color--surface--lightest--text, #333)}:host([circled=light]){--pfe-icon--color--bg:var(--pfe-theme--color--surface--lighter, #ececec);--pfe-icon--color--border:transparent;--pfe-broadcasted--color--text:var(--pfe-theme--color--surface--lighter--text, #333)}:host([circled=dark]){--pfe-icon--color--bg:var(--pfe-theme--color--surface--darker, #464646);--pfe-icon--color--border:transparent;--pfe-broadcasted--color--text:var(--pfe-theme--color--surface--darker--text, #fff)}:host([circled=darkest]){--pfe-icon--color--bg:var(--pfe-theme--color--surface--darkest, #131313);--pfe-icon--color--border:transparent;--pfe-broadcasted--color--text:var(--pfe-theme--color--surface--darkest--text, #fff)}:host([circled=complement]){--pfe-icon--color--bg:var(--pfe-theme--color--surface--complement, #0477a4);--pfe-icon--color--border:transparent;--pfe-broadcasted--color--text:var(--pfe-theme--color--surface--complement--text, #fff)}:host([circled=accent]){--pfe-icon--color--bg:var(--pfe-theme--color--surface--accent, #fe460d);--pfe-icon--color--border:transparent;--pfe-broadcasted--color--text:var(--pfe-theme--color--surface--accent--text, #fff)}</style><svg xmlns="http://www.w3.org/2000/svg">\n  <filter id="color-filter" color-interpolation-filters="sRGB" x="0" y="0" height="100%" width="100%">\n    <feFlood result="COLOR" />\n    <feComposite operator="in" in="COLOR" in2="SourceAlpha" />\n  </filter>\n  <image xlink:href="" width="100%" height="100%" filter="url(#color-filter)"></image>\n</svg>';
              }
            },
            {
              key: "templateUrl",
              get: function() {
                return "pfe-icon.html";
              }
            },
            {
              key: "styleUrl",
              get: function() {
                return "pfe-icon.scss";
              }
            }
          ],
          [
            {
              key: "version",
              get: function() {
                return "1.0.0-prerelease.17";
              }
            },
            {
              key: "tag",
              get: function() {
                return "pfe-icon";
              }
            },
            {
              key: "observedAttributes",
              get: function() {
                return ["pfe-icon"];
              }
            }
          ]
        ),
        o(
          a,
          [
            {
              key: "iconLoad",
              value: function() {
                this.image.classList.remove("load-failed");
              }
            },
            {
              key: "iconLoadError",
              value: function() {
                console.warn(
                  'icon named "' +
                    this.getAttribute("pfe-icon") +
                    '" failed to load from URL ' +
                    this.image.getAttribute("xlink:href")
                ),
                  this.image.classList.add("load-failed");
              }
            },
            {
              key: "attributeChangedCallback",
              value: function(e, t, o) {
                (function e(t, o, r) {
                  null === t && (t = Function.prototype);
                  var n = Object.getOwnPropertyDescriptor(t, o);
                  if (void 0 === n) {
                    var a = Object.getPrototypeOf(t);
                    return null === a ? void 0 : e(a, o, r);
                  }
                  if ("value" in n) return n.value;
                  var c = n.get;
                  return void 0 !== c ? c.call(r) : void 0;
                })(
                  a.prototype.__proto__ || Object.getPrototypeOf(a.prototype),
                  "attributeChangedCallback",
                  this
                ).apply(this, arguments),
                  this.updateIcon(o);
              }
            },
            {
              key: "updateIcon",
              value: function(e) {
                var t = a.getIconSet(e),
                  o = t.setName,
                  r = t.set;
                if (r) {
                  var n = r.parseIconName(e).iconPath;
                  this.image.setAttribute("xlink:href", n);
                } else
                  console.warn(
                    'icon "' +
                      e +
                      '" was requested but no icon set "' +
                      o +
                      '" is registered'
                  );
              }
            }
          ],
          [
            {
              key: "getIconSet",
              value: function(e) {
                var t = e.split("-"),
                  o = c(t, 1)[0];
                return { setName: o, set: this._iconSets[o] };
              }
            },
            {
              key: "addIconSet",
              value: function(e, t, o) {
                if (this._iconSets[e])
                  throw new Error(
                    "can't add icon set " +
                      e +
                      "; a set with that name already exists."
                  );
                this._iconSets[e] = new r(e, t, o);
              }
            }
          ]
        ),
        a
      );
    })();
  return (
    (e._iconSets = {}),
    (i = e),
    [
      {
        name: "web",
        path:
          "https://access.redhat.com/webassets/avalon/j/lib/rh-iconfont-svgs"
      },
      {
        name: "rh",
        path:
          "https://access.redhat.com/webassets/avalon/j/lib/rh-iconfont-svgs"
      }
    ].forEach(function(e) {
      return i.addIconSet(e.name, e.path, a);
    }),
    t.create(e),
    e
  );
});
//# sourceMappingURL=pfe-icon.umd.min.js.map
